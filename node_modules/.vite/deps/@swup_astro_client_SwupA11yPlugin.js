import {
  l
} from "./chunk-FKYS5ESV.js";
import {
  e
} from "./chunk-RU6KZPHD.js";
import "./chunk-XSCQBFM2.js";

// node_modules/.pnpm/focus-options-polyfill@1.6.0/node_modules/focus-options-polyfill/index.js
(function() {
  if (typeof window === "undefined" || typeof document === "undefined" || typeof HTMLElement === "undefined") {
    return;
  }
  var supportsPreventScrollOption = false;
  try {
    var focusElem = document.createElement("div");
    focusElem.addEventListener(
      "focus",
      function(event) {
        event.preventDefault();
        event.stopPropagation();
      },
      true
    );
    focusElem.focus(
      Object.defineProperty({}, "preventScroll", {
        get: function() {
          if (navigator && typeof navigator.userAgent !== "undefined" && navigator.userAgent && navigator.userAgent.match(/Edge\/1[7-8]/)) {
            return supportsPreventScrollOption = false;
          }
          supportsPreventScrollOption = true;
        }
      })
    );
  } catch (e3) {
  }
  if (HTMLElement.prototype.nativeFocus === void 0 && !supportsPreventScrollOption) {
    HTMLElement.prototype.nativeFocus = HTMLElement.prototype.focus;
    var calcScrollableElements = function(element) {
      var parent = element.parentNode;
      var scrollableElements = [];
      var rootScrollingElement = document.scrollingElement || document.documentElement;
      while (parent && parent !== rootScrollingElement) {
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {
          scrollableElements.push([
            parent,
            parent.scrollTop,
            parent.scrollLeft
          ]);
        }
        parent = parent.parentNode;
      }
      parent = rootScrollingElement;
      scrollableElements.push([parent, parent.scrollTop, parent.scrollLeft]);
      return scrollableElements;
    };
    var restoreScrollPosition = function(scrollableElements) {
      for (var i2 = 0; i2 < scrollableElements.length; i2++) {
        scrollableElements[i2][0].scrollTop = scrollableElements[i2][1];
        scrollableElements[i2][0].scrollLeft = scrollableElements[i2][2];
      }
      scrollableElements = [];
    };
    var patchedFocus = function(args) {
      if (args && args.preventScroll) {
        var evScrollableElements = calcScrollableElements(this);
        if (typeof setTimeout === "function") {
          var thisElem = this;
          setTimeout(function() {
            thisElem.nativeFocus();
            restoreScrollPosition(evScrollableElements);
          }, 0);
        } else {
          this.nativeFocus();
          restoreScrollPosition(evScrollableElements);
        }
      } else {
        this.nativeFocus();
      }
    };
    HTMLElement.prototype.focus = patchedFocus;
  }
})();

// node_modules/.pnpm/@swup+a11y-plugin@5.0.0_swup@4.8.1/node_modules/@swup/a11y-plugin/dist/index.modern.js
function e2() {
  return e2 = Object.assign ? Object.assign.bind() : function(t) {
    for (var n = 1; n < arguments.length; n++) {
      var e3 = arguments[n];
      for (var o2 in e3) Object.prototype.hasOwnProperty.call(e3, o2) && (t[o2] = e3[o2]);
    }
    return t;
  }, e2.apply(this, arguments);
}
function o(t, n) {
  return Object.keys(n).reduce((t2, e3) => t2.replace(`{${e3}}`, n[e3] || ""), t || "");
}
var i = class {
  constructor() {
    var t;
    this.id = "swup-announcer", this.style = "position:absolute;top:0;left:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;word-wrap:normal;width:1px;height:1px;", this.region = void 0, this.region = null != (t = this.getRegion()) ? t : this.createRegion();
  }
  getRegion() {
    return document.getElementById(this.id);
  }
  createRegion() {
    const t = function(t2) {
      const n = document.createElement("template");
      return n.innerHTML = t2, n.content.children[0];
    }(`<p aria-live="assertive" aria-atomic="true" id="${this.id}" style="${this.style}"></p>`);
    return document.body.appendChild(t), t;
  }
  announce(t, n = 0) {
    return new Promise((e3) => {
      setTimeout(() => {
        this.region.textContent === t && (t = `${t}.`), this.region.textContent = "", this.region.textContent = t, e3();
      }, n);
    });
  }
};
function s(t) {
  let n;
  if (n = "string" == typeof t ? document.querySelector(t) : t, !(n instanceof HTMLElement)) return;
  const e3 = n.getAttribute("tabindex");
  n.setAttribute("tabindex", "-1"), n.focus({ preventScroll: true }), null !== e3 && n.setAttribute("tabindex", e3);
}
var r = class extends e {
  constructor(t = {}) {
    super(), this.name = "SwupA11yPlugin", this.requires = { swup: ">=4" }, this.defaults = { headingSelector: "h1", respectReducedMotion: true, autofocus: false, announcements: { visit: "Navigated to: {title}", url: "New page at {url}" } }, this.options = void 0, this.announcer = void 0, this.announcementDelay = 100, this.rootSelector = "body", this.handleAnchorScroll = (t2, { hash: n }) => {
      const e3 = this.swup.getAnchorElement(n);
      e3 instanceof HTMLElement && s(e3);
    }, this.options = e2({}, this.defaults, t), this.announcer = new i();
  }
  mount() {
    this.swup.hooks.create("content:announce"), this.swup.hooks.create("content:focus"), this.before("visit:start", this.prepareVisit), this.on("visit:start", this.markAsBusy), this.on("visit:end", this.unmarkAsBusy), this.on("visit:end", this.focusContent), this.on("visit:end", this.announceContent), this.on("scroll:anchor", this.handleAnchorScroll), this.before("visit:start", this.disableAnimations), this.before("link:self", this.disableAnimations), this.before("link:anchor", this.disableAnimations), this.swup.announce = this.announce.bind(this);
  }
  unmount() {
    this.swup.announce = void 0;
  }
  async announce(t) {
    await this.announcer.announce(t);
  }
  markAsBusy() {
    document.documentElement.setAttribute("aria-busy", "true");
  }
  unmarkAsBusy() {
    document.documentElement.removeAttribute("aria-busy");
  }
  prepareVisit(t) {
    t.a11y = { announce: void 0, focus: this.rootSelector };
  }
  announceContent(t) {
    this.swup.hooks.callSync("content:announce", t, void 0, (t2) => {
      void 0 === t2.a11y.announce && (t2.a11y.announce = this.getPageAnnouncement()), t2.a11y.announce && this.announcer.announce(t2.a11y.announce, this.announcementDelay);
    });
  }
  focusContent(t) {
    this.swup.hooks.callSync("content:focus", t, void 0, (t2) => {
      t2.a11y.focus && (this.options.autofocus && true === function() {
        const t3 = function() {
          const t4 = document.querySelector("body [autofocus]");
          if (t4 && !t4.closest('[inert], [aria-disabled], [aria-hidden="true"]')) return t4;
        }();
        return !!t3 && (t3 !== document.activeElement && t3.focus(), true);
      }() || s(t2.a11y.focus));
    });
  }
  getPageAnnouncement() {
    const { headingSelector: t, announcements: e3 } = this.options;
    return function({ headingSelector: t2 = "h1", announcements: e4 = {} }) {
      var i2, s2;
      const r2 = document.documentElement.lang || "*", { href: a, url: u, pathname: c } = l.fromUrl(window.location.href), l2 = null != (i2 = null != (s2 = e4[r2]) ? s2 : e4["*"]) ? i2 : e4;
      if ("object" != typeof l2) return;
      const h = document.querySelector(t2);
      h || console.warn(`SwupA11yPlugin: No main heading (${t2}) found on new page`);
      const d = (null == h ? void 0 : h.getAttribute("aria-label")) || (null == h ? void 0 : h.textContent) || document.title || o(l2.url, { href: a, url: u, path: c });
      return o(l2.visit, { title: d, href: a, url: u, path: c });
    }({ headingSelector: t, announcements: e3 });
  }
  disableAnimations(t) {
    this.options.respectReducedMotion && window.matchMedia("(prefers-reduced-motion: reduce)").matches && (t.animation.animate = false, t.scroll.animate = false);
  }
};
export {
  r as default
};
//# sourceMappingURL=@swup_astro_client_SwupA11yPlugin.js.map
